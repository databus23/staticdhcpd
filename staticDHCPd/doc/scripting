In addition to static parameters to configure staticDHCPd to work in your
environment, extensive scripting is possible, allowing it to perform dynamic
allocations, send events to other systems, and give you full control over every
last detail of how DHCP works in your environment.

As with the static parameters, scripting logic is intended to be as
forwards-compatible as possible, so newer versions of the server should work
with any extensions you've developed, with no issues.
(Check the changelog, though)


Several functions are currently defined as hooks from staticDHCPd's core.
To implement one, just create a function in conf.py with the corresponding
signature.

In addition, a number of callbacks exist that let you hook your code into
staticDHCPd's core functions and modules. This, and logging, are covered below,
too.

To avoid potential conflicts, any other functions you may define should be named
with a leading underscore. Likewise, any modules you define should also be named
with a leading underscore.


If you wish to encapsulate code inside of a module, place it in the same
directory as conf.py or in a subpackage thereof. conf.py's directory is added to
sys.path, so imports from a relative root should work just like they usually do.

In particular, if you expect to have a lot of custom code, you should create a
file alongside conf.py named "_handlers.py" and import the main callback
functions from there to keep conf.py clean. At the same level as the config
directives, do something like the following:

from _handlers import (init, handleUnknownMAC, loadDHCPPacket)


The examples below will show you how to enable dynamic provisioning using the
included 'dynamism' module. To make these examples work, copy
contrib/dynamism.py to the same directory as conf.py.

Using dynamism as an example, you should be able to write extension modules of
your own. To customise DHCP behaviour, see the rules-writing guide:
http://code.google.com/p/staticdhcpd/wiki/rules


Hook-functions
--------------------------------------------------------------------------------
init()
----------------------------------------
This function is called immediately after all of staticDHCPd's other subsystems
have been configured. (To do something before they're online, write your logic
at the same level as the parameter definitions)

Within it, you can do things like register for event callbacks or set up
facilities required by other portions of your code.

Example
------------------------------
def init():
    import dynamism
    global _dynamic_pool
    _dynamic_pool = dynamism.DynamicPool('guest', 0, 300, 'guest-0')
    _dynamic_pool.add_ips(['192.168.250.' + str(i) for i in range(100, 201)])
    
Explanation
--------------------
When init() is called by staticDHCPd, this will import the 'dynamism' module
and create a dynamic allocation pool with 192.168.250.100-200 (range doesn't
include the upper-most element), making it available for use in other parts of
conf.py.

You'll probably want to pass in different parameters, though; see dynamism.py
for details.

The 'global' line is necessary because, when init() finishes, all variables it
declared would normally be discarded, so this says "I want to modify the variable
'_dynamic_pool' at the conf-module level".


filterPacket(packet, method, mac, client_ip, relay_ip, pxe, vendor)
----------------------------------------
Provides a means of writing your own blacklist logic, excluding packets from
sources you don't trust, that have done weird things, or under any other
conceivable circumstance.

It is called before the MAC is looked up in the database or by
handleUnknownMAC(). Returning True  will cause the MAC to proceed through the
chain as normal, while returning False will cause it to be discarded. Returning
None will put it into the temporary blacklist, like other MACs that trip
staticDHCPd's configurable thresholds.

Parameters
------------------------------
    packet: the packet received from the client, an instance of
            `libpydhcpserver.dhcp_types.packet.DHCPPacket`
    method: a string describing the type of DHCP request the packet represents,
            one of 'DECLINE', 'DISCOVER', 'INFORM', 'RELEASE',
            'REQUEST:INIT-REBOOT','REQUEST:REBIND', 'REQUEST:RENEW',
            'REQUEST:SELECTING'
    mac: an object that emulates the properties of a sextuple
         (0, 38, 199, 214, 5, 200) and a string ("00:26:c7:d6:05:c8"), which may
         be compared against either, including any strings parseable as MACs
         (case/delimiter-insensitive)
    client_ip: an object that emulates the properties of a quadruple of octets
               (192, 168, 0, 1), a dotted quad ("192.168.0.1"), and an integer
               (3232235521), or None, if the request didn't specify an address
               to associate with the client
    relay_ip: either None or an object of the type described in client_ip,
              representing the server that relayed this request
    pxe: False if not applicable; else, a triple containing, in order, option 93
         (client_system) as a sequence of ints, option 94 (client_ndi) as a
         sequence of three bytes, and option 97 (uuid_guid) as digested data:
         (type:byte, data:[byte])
         Any unset options are presented as None
    vendor: a four-tuple containing, in order, option 43
            (vendor_specific_information) as a string of bytes, option 60
            (vendor_class_identifier) as a string, and both option 124
            (vendor_class) and option 125 (vendor_specific) as digested data:
            [(enterprise_number:int, data:string)] and
            [(enterprise_number:int, [(subopt_code:byte, data:string)])],
            respectively
            Any unset options are presented as None

Example
------------------------------
def filterPacket(packet, method, mac, client_ip, relay_ip, pxe, vendor):
    import random
    return random.random() < 0.5
    
Explanation
--------------------
This will just fake a lossy network, dropping 50% of all packets received.

You'd probably want to do something more interesting, like checking a database
or adding to some sort of global counter. This database could be an in-memory
construct that you populate with a custom web-method that takes the MAC to
block as a query-argument, described below, to make it easy to write a module
that does this on-the-fly.


handleUnknownMAC(packet, method, mac, client_ip, relay_ip, pxe, vendor)
----------------------------------------
If staticDHCPd gets a request to serve a MAC that it does not recognise, this
function will be invoked, allowing you to query databases of your own to fill in
the blanks.

Parameters
------------------------------
    packet: the packet received from the client, an instance of
            `libpydhcpserver.dhcp_types.packet.DHCPPacket`
    method: a string describing the type of DHCP request the packet represents,
            one of 'DECLINE', 'DISCOVER', 'INFORM', 'RELEASE',
            'REQUEST:INIT-REBOOT','REQUEST:REBIND', 'REQUEST:RENEW',
            'REQUEST:SELECTING'
    mac: an object that emulates the properties of a sextuple
         (0, 38, 199, 214, 5, 200) and a string ("00:26:c7:d6:05:c8"), which may
         be compared against either, including any strings parseable as MACs
         (case/delimiter-insensitive)
    client_ip: an object that emulates the properties of a quadruple of octets
               (192, 168, 0, 1), a dotted quad ("192.168.0.1"), and an integer
               (3232235521), or None, if the request didn't specify an address
               to associate with the client
    relay_ip: either None or an object of the type described in client_ip,
              representing the server that relayed this request
    pxe: False if not applicable; else, a triple containing, in order, option 93
         (client_system) as a sequence of ints, option 94 (client_ndi) as a
         sequence of three bytes, and option 97 (uuid_guid) as digested data:
         (type:byte, data:[byte])
         Any unset options are presented as None
    vendor: a four-tuple containing, in order, option 43
            (vendor_specific_information) as a string of bytes, option 60
            (vendor_class_identifier) as a string, and both option 124
            (vendor_class) and option 125 (vendor_specific) as digested data:
            [(enterprise_number:int, data:string)] and
            [(enterprise_number:int, [(subopt_code:byte, data:string)])],
            respectively
            Any unset options are presented as None
    
The value returned must be either None, which means that the MAC will remain
unknown, or an instance of `staticdhcpd.dhcp.Definition`.

Example
------------------------------
def handleUnknownMAC(packet, method, mac, client_ip, relay_ip, pxe, vendor):
    return _dynamic_pool.handle(method, packet, mac, client_ip)
    
Explanation
--------------------
Since '_dynamic_pool' was created in init() and made globally accessible, all
this function has to do is pass a few parameters to dynamism.handle() and it
will return either None or a Definition object, which is all you need.


loadDHCPPacket(packet, method, mac, subnet, serial, client_ip, relay_ip, pxe,
vendor)
----------------------------------------
Before any response is sent to a client, an opportunity is presented to allow
you to modify the packet, adding or removing options and setting values as
needed for your environment's specific requirements. Or even allowing you to
define your own blacklist rules and behaviour.

Parameters
------------------------------
    packet: the packet received from the client, an instance of
            `libpydhcpserver.dhcp_types.packet.DHCPPacket`
    method: a string describing the type of DHCP request the packet represents,
            one of 'DECLINE', 'DISCOVER', 'INFORM', 'RELEASE',
            'REQUEST:INIT-REBOOT','REQUEST:REBIND', 'REQUEST:RENEW',
            'REQUEST:SELECTING'
    mac: an object that emulates the properties of a sextuple
         (0, 38, 199, 214, 5, 200) and a string ("00:26:c7:d6:05:c8"), which may
         be compared against either, including any strings parseable as MACs
         (case/delimiter-insensitive)
    instance of libpydhcpserver.dhcp_types.mac.MAC, which can be coerced
         into a human-readable, lower-case, colon-delimited string or a sequence
         of bytes, or compared directly against either
    subnet: the subnet-string associated with the lease's definition
    serial: the serial-integer associated with the lease's definition
    client_ip: an object that emulates the properties of a quadruple of octets
               (192, 168, 0, 1), a dotted quad ("192.168.0.1"), and an integer
               (3232235521)
    relay_ip: either None or an object of the type described in client_ip,
              representing the server that relayed this request
    pxe: False if not applicable; else, a triple containing, in order, option 93
         (client_system) as a sequence of ints, option 94 (client_ndi) as a
         sequence of three bytes, and option 97 (uuid_guid) as digested data:
         (type:byte, data:[byte])
         Any unset options are presented as None
    vendor: a four-tuple containing, in order, option 43
            (vendor_specific_information) as a string of bytes, option 60
            (vendor_class_identifier) as a string, and both option 124
            (vendor_class) and option 125 (vendor_specific) as digested data:
            [(enterprise_number:int, data:string)] and
            [(enterprise_number:int, [(subopt_code:byte, data:string)])],
            respectively
            Any unset options are presented as None

If the value returned evaluates to False, no response will be sent to the
client; otherwise, `packet` will be sent as it stands when this function
completes.

Example
------------------------------
def loadDHCPPacket(packet, method, mac, subnet, serial, client_ip, relay_ip, pxe, vendor):
    import random
    
    if client_ip[3] % 3 == 0: #The client's IP's fourth octet is a multiple of 3
        packet.setOption('renewal_time_value', longToList(60))
    elif method.startswith('REQUEST:') and random.random() < 0.5:
        packet.transformToDHCPNakPacket()
    elif random.random() < 0.1:
        return False
    return True
    
Explanation
--------------------
This will set the renewal-time (T1) for clients to one minute if they have an IP
that ends in a multiple of 3, which is one of the examples in the rules-writing
guide: http://code.google.com/p/staticdhcpd/wiki/rules

If the first qualifier isn't satisfied and it's a REQUEST-type request, there's
a 50% chance that it will be changed into a NAK response.

Lastly, if neither of the previous conditions were met, there's a 10% chance the
packet will simply be dropped.




Callback-functions
--------------------------------------------------------------------------------
staticDHCPd provides a number of functions you can use to integrate your code
into its internal procedures, letting you do fun things like register
webservices, build your own statistics modules, add things to the dashboard,
reload config files, and get stable notification about the passage of time.

To use these, just call them from `init()`.


callbacks.systemAddReinitHandler(callback)
----------------------------------------
Registers a callable to be invoked whenever the system is reinitialised.

Parameters
------------------------------
    callback: The callable to be invoked; must not require any arguments
    
    
callbacks.systemRemoveReinitHandler(callback)
----------------------------------------
Unregisters a callable from the list of those invoked during reinitialisation.

Parameters
------------------------------
    callback: The callable to be removed
    
    
callbacks.systemAddTickHandler(callback)
----------------------------------------
Registers a callable to be invoked approximately once every second.

Parameters
------------------------------
    callback: The callable to be invoked; must not require any arguments;
              must not block for any significant amount of time
              
              
callbacks.systemRemoveTickHandler(callback)
----------------------------------------
Unregisters a callable from the list of those invoked every second.

Parameters
------------------------------
    callback: The callable to be removed
    
    
callbacks.statsAddHandler(callback)
----------------------------------------
Registers a callable to be invoked every time statistics information is emitted.

Parameters
------------------------------
    callback: A callable that accepts an instance of statistics.Statistics;
              must not block for any significant amount of time
              
              
callbacks.statsRemoveHandler(callback)
----------------------------------------
Unregisters a callable from the list of those invoked when statistics are
emitted.

Parameters
------------------------------
    callback: The callable to be removed
    
    
callbacks.webAddDashboard(module, name, callback, ordering=None)
----------------------------------------
Adds an element to the web-dashboard.

Parameters
------------------------------
    module: something like "best module EVER"
    name: something like "awesomifications per second"
    callback: The callable to be invoked when the dashboard is rendered; this is
              what you'll need to implement
              It must accept the parameters 'path', 'queryargs', 'mimetype',
              'data', and 'headers', with the possibility that 'mimetype' and
              'data' may be None; 'queryargs' is a dictionary of parsed
              query-string items, with values expressed as lists of strings;
              'headers' is a Python BasicHTTPServer headers object
              It must return data as a string, formatted as XHTML, to be
              embedded inside of a <div/>, or None to suppress inclusion
    ordering: number|None
    ordering: A bias-specifier that controls where this element will appear in
              relation to others. If omitted, the value will be that of the
              highest number plus one; negatives are valid
              
              
callbacks.webRemoveDashboard(callback)
----------------------------------------
Removes an element from the web-dashboard.

Parameters
------------------------------
    callback: The callback with which the element was initially registered
    
    
callbacks.webAddMethod(path, callback, cacheable=False, hidden=True,
secure=False, module=None, name=None, confirm=False,
display_mode=callbacks.WEB_METHOD_RAW)
----------------------------------------
Adds a webservice method.

Parameters
------------------------------
    path: The path at which to register this callback, typically something like
          "/ca/uguu/puukusoft/staticDHCPd/contrib/stats/histograph.csv", but as
          long as it's a valid URI-fragment, it's up to you
    callback: The callable to be invoked when the method is called; this is
              what you'll need to implement
              It must accept the parameters 'path', 'queryargs', 'mimetype',
              'data', and 'headers', with the possibility that 'mimetype' and
              'data' may be None; 'queryargs' is a dictionary of parsed
              query-string items, with values expressed as lists of strings;
              'headers' is a Python BasicHTTPServer headers object
              It must return a tuple of (mimetype, data, headers), with data
              being a string or bytes-like object
    cacheable: Whether the client should be allowed to cache the returned
               content.
    hidden: Whether the method should be rendered on the interface
    secure: Whether DIGEST authentication will be required to access the method
    module: something like "best module EVER"; optional if hidden
    name: something like "double awesomeness levels"; optional if hidden
    confirm: Whether JavaScript validation will be used to prompt the user to
             confirm that they want to perform the chosen action, if not hidden
    display_mode: One of the following:
                   - callbacks.WEB_METHOD_RAW: The content is presented exactly
                     as returned, identified by the given mimetype
                   - callbacks.WEB_METHOD_TEMPLATE: The content is rendered in
                     the same container that would normally show the dashboard,
                     but no dashboard elements are present
                   - callbacks.WEB_METHOD_DASHBOARD: The content is rendered
                     before the dashboard
                     
                     
callbacks.webRemoveMethod(path)
----------------------------------------
Removes a webservice method.

Parameters
------------------------------
    path: The path of the method to remove
    
    
    
    
Logging
----------------------------------------
staticDHCPd uses Python's standard logging package, so writing to logs is as
easy as the following snippet:
    import logging
    logger = logging.getLogger('my-module')
    logger.info("I'm writing to the loggins system!")
    
Similarly, if you want to capture logging events, you can hook in easily:
    import logging
    logging.root.addHandler(_YOUR_HANDLER_)
    
An example of a custom handler, and application thereof, can be found in
contrib/feedservice.py

